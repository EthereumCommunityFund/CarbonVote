/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingOptionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castTransactionVote"
      | "castVote"
      | "endTime"
      | "getVotersCount"
      | "mainContract"
      | "name"
      | "option_index"
      | "pollIndex"
      | "removeVote"
      | "voters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castTransactionVote",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVotersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "option_index",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pollIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVote",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "castTransactionVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "option_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pollIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
}

export interface VotingOption extends BaseContract {
  connect(runner?: ContractRunner | null): VotingOption;
  waitForDeployment(): Promise<this>;

  interface: VotingOptionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castTransactionVote: TypedContractMethod<
    [voter: AddressLike],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [voter: AddressLike, signature: BytesLike, message: string],
    [void],
    "nonpayable"
  >;

  endTime: TypedContractMethod<[], [bigint], "view">;

  getVotersCount: TypedContractMethod<[], [bigint], "view">;

  mainContract: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  option_index: TypedContractMethod<[], [bigint], "view">;

  pollIndex: TypedContractMethod<[], [bigint], "view">;

  removeVote: TypedContractMethod<[voter: AddressLike], [void], "nonpayable">;

  voters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castTransactionVote"
  ): TypedContractMethod<[voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [voter: AddressLike, signature: BytesLike, message: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mainContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "option_index"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pollIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeVote"
  ): TypedContractMethod<[voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  filters: {};
}
